class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>adj[n];
        for(int i=0;i<n;i++){
            for(auto &v:graph[i]){
                adj[v].push_back(i);
            }
        }
        // for(int i=0;i<graph.size();i++){
        //     for(auto &v:adj[i]){
        //         cout<<v<<" ";
        //     }cout<<endl;
        // }
          queue<int>q;
	    vector<int>indegree(n,0);
	    for(int i=0;i<n;i++){
	        for(auto &v:adj[i]){
	            indegree[v]++;
	        }
	    }
	    for(int i=0;i<n;i++){
	        if(indegree[i]==0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(q.size()){
	        int node=q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto &v:adj[node]){
	            indegree[v]--;
	            if(indegree[v]==0)q.push(v);
	        }
	    }
        sort(ans.begin(),ans.end());
	    return ans;
    }
};
