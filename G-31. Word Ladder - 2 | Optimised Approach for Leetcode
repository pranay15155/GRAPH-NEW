https://leetcode.com/problems/word-ladder-ii/?source=submission-noac


class Solution {
public:

vector<string> f(string &s,map<string,int>&mp){
        vector<string>ans;
        for(int i=0;i<s.size();i++){
            for(int j=0;j<26;j++){
                string new_temp=s;
                char x=char('a'+j);
                new_temp[i]=x;
                if(new_temp!=s && mp.find(new_temp)!=mp.end()){
                    ans.push_back(new_temp);
                }
            }
        }
        return ans;
    }

    void dfs(string &s,string &beginWord,vector<string>&temp, map<string,int>&level,vector<vector<string>>&ans,map<string,int>&mp){
           vector<string>v=f(s,mp);
        //    d2(s,v);
           temp.push_back(s);
           if(s==beginWord){
            ans.push_back(temp);
            }
           for(int i=0;i<v.size();i++){
            if(level[v[i]]<level[s]){
               dfs(v[i],beginWord,temp,level,ans,mp);
            }
           }
           temp.pop_back();
    }

    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        map<string,int>mp,vis,level;
        for(int i=0;i<wordList.size();i++){
            mp[wordList[i]]++;
        }
        mp[beginWord]++;
        queue<pair<string,int>>q;
        q.push({beginWord,0});
        vector<vector<string>> ans;
        vis[beginWord]++;
        level[beginWord]=0;
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                auto x=q.front();
                q.pop();
                vector<string>temp=f(x.first,mp);
                for(auto &z:temp){
                    if(vis.find(z)==vis.end()){
                       vis[z]++;
                       level[z]=1+x.second;
                       q.push({z,level[z]});
                    }
                }
            }
        }
        // d(level);
        vector<string>temp;
        dfs(endWord,beginWord,temp,level,ans,mp);
        for(int i=0;i<ans.size();i++){
            reverse(ans[i].begin(),ans[i].end());
        }
        return ans;
    }
};
