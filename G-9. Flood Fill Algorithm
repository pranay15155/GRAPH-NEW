//BFS

class Solution {
public:
    int n,m;
     void bfs(int srow,int scol,vector<vector<int>>& grid,vector<vector<int>>&vis,int color,int init_color){
        queue<pair<int,int>>q;
        vis[srow][scol]=1;
        q.push({srow,scol});
        grid[srow][scol]=color;
        while(q.size()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            // int nrow[8]={-1,-1,-1,0,1,1,1,0};
            // int ncol[8]={-1,0,1,1,1,0,-1,-1};
            int nrow[4]={-1,0,1,0};
            int ncol[4]={0,1,0,-1};
            for(int i=0;i<4;i++){
                int new_row=row+nrow[i];
                int new_col=col+ncol[i];
                if(new_row<0 || new_col<0 || new_row>=n || new_col>=m)continue;
                else{
                    if(vis[new_row][new_col]==0 && grid[new_row][new_col]==init_color){
                        vis[new_row][new_col]=1;
                        grid[new_row][new_col]=color;
                        q.push({new_row,new_col});
                    }
                }
            }
        }
        return ;

    }
    vector<vector<int>> floodFill(vector<vector<int>>& grid, int sr, int sc, int color) {
        n=grid.size(),m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        bfs(sr,sc,grid,vis,color,grid[sr][sc]);
        return grid;
    }
};

//DFS

class Solution {
public:
    int n,m;
     void dfs(int row,int col,vector<vector<int>>& grid,vector<vector<int>>&vis,int color,int init_color){
        vis[row][col]=1;
        grid[row][col]=color;
        int nrow[4]={-1,0,1,0};
        int ncol[4]={0,1,0,-1};
            for(int i=0;i<4;i++){
                int new_row=row+nrow[i];
                int new_col=col+ncol[i];
                if(new_row<0 || new_col<0 || new_row>=n || new_col>=m)continue;
                else{
                    if(vis[new_row][new_col]==0 && grid[new_row][new_col]==init_color){
                        vis[new_row][new_col]=1;
                        grid[new_row][new_col]=color;
                        dfs(new_row,new_col,grid,vis,color,init_color);
                    }
                }
            }
            return;

     }
    vector<vector<int>> floodFill(vector<vector<int>>& grid, int sr, int sc, int color) {
        n=grid.size(),m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        dfs(sr,sc,grid,vis,color,grid[sr][sc]);
        return grid;
    }
};
