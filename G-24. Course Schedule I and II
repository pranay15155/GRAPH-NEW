class Solution {
public:
    bool canFinish(int num, vector<vector<int>>& pre) {
        vector<int>adj[num];
        for(int i=0;i<pre.size();i++){
            adj[pre[i][0]].push_back(pre[i][1]);
        }
          queue<int>q;
	    vector<int>indegree(num,0);
	    for(int i=0;i<num;i++){
	        for(auto &v:adj[i]){
	            indegree[v]++;
	        }
	    }
	    for(int i=0;i<num;i++){
	        if(indegree[i]==0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(q.size()){
	        int node=q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto &v:adj[node]){
	            indegree[v]--;
	            if(indegree[v]==0)q.push(v);
	        }
	    }
	    return ans.size()==num?1:0;
    }
};



class Solution {
public:
    vector<int> findOrder(int num, vector<vector<int>>& pre) {
       vector<int>adj[num];
        for(int i=0;i<pre.size();i++){
            adj[pre[i][0]].push_back(pre[i][1]);
        }
          queue<int>q;
	    vector<int>indegree(num,0);
	    for(int i=0;i<num;i++){
	        for(auto &v:adj[i]){
	            indegree[v]++;
	        }
	    }
	    for(int i=0;i<num;i++){
	        if(indegree[i]==0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(q.size()){
	        int node=q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto &v:adj[node]){
	            indegree[v]--;
	            if(indegree[v]==0)q.push(v);
	        }
	    }
        reverse(ans.begin(),ans.end());
        return ans.size() == num ? ans : vector<int>(); 
    }
};
