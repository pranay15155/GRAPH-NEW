//BFS

class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int n=grid.size(),m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && (i==0 || i==n-1 || j==0 || j==m-1)){
                    vis[i][j]=1;
                    q.push({i,j});
                }
            }
        }
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                int row=q.front().first;
                int col=q.front().second;
                q.pop();
                int nrow[4]={-1,0,1,0};
                int ncol[4]={0,1,0,-1};
                for(int j=0;j<4;j++){
                    int new_row=row+nrow[j];
                    int new_col=col+ncol[j];
                    if(new_row<0 || new_col<0 ||new_row>=n || new_col>=m)continue;
                    if(grid[new_row][new_col]==0 || vis[new_row][new_col]==1)continue;
                    if(grid[new_row][new_col]==1 && vis[new_row][new_col]==0){
                         vis[new_row][new_col]=1;
                         q.push({new_row,new_col});
                    }
                }
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]==0){
                   count++;
                }
            }
        }
        return count;
    }
};




//DFS

class Solution {
public:
    int n, m;
    void dfs(int row, int col, vector<vector<int>>& grid,vector<vector<int>>& vis) {
        int nrow[4] = {-1, 0, 1, 0};
        int ncol[4] = {0, 1, 0, -1};
        for (int j = 0; j < 4; j++) {
            int new_row = row + nrow[j];
            int new_col = col + ncol[j];
            if (new_row < 0 || new_col < 0 || new_row >= n || new_col >= m)
                continue;
            if (grid[new_row][new_col] == 0 || vis[new_row][new_col] == 1)
                continue;
            if (grid[new_row][new_col] == 1 && vis[new_row][new_col] == 0) {
                vis[new_row][new_col] = 1;
                dfs(new_row, new_col, grid, vis);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && (i == 0 || i == n - 1 || j == 0 || j == m - 1)) {
                    vis[i][j] = 1;
                    dfs(i, j, grid, vis);
                }
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]==0){
                   count++;
                }
            }
        }
        return count;
    }
};
