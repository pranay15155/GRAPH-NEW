class Solution {
  public:
    void dfs(int row,int col,int row0,int col0,vector<vector<int>>& grid,vector<vector<int>>&vis,vector<pair<int,int>>&ans){
        vis[row][col]=1;
        int n=grid.size(),m=grid[0].size();
        int drow[4]={-1,0,1,0};
        int dcol[4]={0,1,0,-1};
        ans.push_back({row-row0,col-col0});
        for(int i=0;i<4;i++){
            int nrow=row+drow[i];
            int ncol=col+dcol[i];
            if(nrow<0 || nrow>=n || ncol<0 || ncol>=m)continue;
            if(vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                dfs(nrow,ncol,row0,col0,grid,vis,ans);
            }
        }
    }
    void bfs(int row,int col,int row0,int col0,vector<vector<int>>& grid,vector<vector<int>>&vis,vector<pair<int,int>>&ans){
        vis[row][col]=1;
        int n=grid.size(),m=grid[0].size();
        ans.push_back({row-row0,col-col0});
        queue<pair<int,int>>q;
        q.push({row,col});
        while(q.size()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            int drow[4]={-1,0,1,0};
            int dcol[4]={0,1,0,-1};
            for(int i=0;i<4;i++){
            int nrow=row+drow[i];
            int ncol=col+dcol[i];
            if(nrow<0 || nrow>=n || ncol<0 || ncol>=m)continue;
            if(vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                vis[nrow][ncol]=1;
                ans.push_back({nrow-row0,ncol-col0});
                q.push({nrow,ncol});
            }
        }
        }


    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        set<vector<pair<int,int>>>st;
        int n=grid.size(),m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==0 && grid[i][j]==1){
                    vector<pair<int,int>>ans;
                    // dfs(i,j,i,j,grid,vis,ans);
                    bfs(i,j,i,j,grid,vis,ans);
                    st.insert(ans);
                }
            }
        }
        
        return st.size();
        
    }
};
